"""
Metadata Extractor

This module extracts structured column statistics from a stored JSON
profiling report. The extracted metadata is converted into `ColumnSchema`
objects for use in downstream EDA and preprocessing steps.
"""

#Import libraries
import json
from typing import Dict
from pathlib import Path

# Import utils
from src.utils.logging import get_logger
from src.utils.exceptions import FileNotFoundError, RuleProcessingError
from src.utils.models import ColumnSchema, ColType

logger = get_logger(__name__)

class MetadataExtractor:
    """
    Extracts structured dataset column metadata from a profiling JSON output.
    
    The metadata is represented as a mapping of column names to ColumnSchema objects,
    which include type information, summary statistics, and missing value details.
    """

    def extract_col_data(self, profile_json_path: str) -> Dict[str, ColumnSchema]:
        """
        Load and parse a profiling JSON file to extract column-level statistics.

        Args:
            profile_json_path (str): Path to the JSON file generated by the profiler.

        Returns:
            Dict[str, ColumnSchema]: Dictionary mapping column names to their schema objects.

        Raises:
            FileNotFoundError: If the profiling JSON file is not found.
            RuleProcessingError: If parsing fails due to invalid format or data issues.
        """
        logger.info(f"Starting metadata extraction from: {profile_json_path}")
        path = Path(profile_json_path)

        if not path.exists():
            logger.error(f"Profiling JSON file not found: {profile_json_path}")
            raise FileNotFoundError(f"Profile file not found: {profile_json_path}")

        try:
            with path.open('r', encoding='utf-8') as f:
                profile = json.load(f)

            if "variables" not in profile:
                logger.warning(f"No 'variables' key found in profiling JSON: {profile_json_path}")
                return {}

            columns_meta: Dict[str, ColumnSchema] = {}
            variables = profile.get("variables", {})

            for col_name, stats in variables.items():
                col_type_raw = (stats.get("type") or "").lower()
                try:
                    col_type = ColType(col_type_raw)
                except ValueError:
                    logger.warning(f"Unrecognized column type '{col_type_raw}' for column '{col_name}'. Defaulting to UNKNOWN.")
                    col_type = ColType.UNKNOWN

                column_schema = ColumnSchema(
                    name=col_name,
                    type=col_type,
                    missing_pct=stats.get("p_missing", 0.0),
                    unique=stats.get("n_unique", 0),
                    mean=stats.get("mean"),
                    std=stats.get("std"),
                    min=stats.get("min"),
                    max=stats.get("max"),
                    mode=stats.get("mode")
                )

                columns_meta[col_name] = column_schema
                logger.debug(f"Extracted metadata for column '{col_name}': {column_schema}")

            logger.info(f"Metadata extraction completed. Extracted {len(columns_meta)} columns.")
            return columns_meta

        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON format in profiling file: {e}")
            raise RuleProcessingError(f"Invalid JSON format in profiling file: {e}") from e

        except Exception as e:
            logger.error(f"Unexpected error while extracting metadata: {e}")
            raise RuleProcessingError(f"Failed to extract column metadata: {e}") from e
